{"version":3,"sources":["types/types.js","reducers/authReducer.js","reducers/calendarReducer.js","reducers/uiReducer.js","reducers/rootReducer.js","store/store.js","helpers/fetch.js","helpers/prepareEvents.js","actions/events.js","actions/auth.js","hooks/useForm.js","components/auth/LoginScreen.js","components/ui/Navbar.js","helpers/calendar-messages-es.js","components/calendar/CalendarEvent.js","actions/ui.js","components/calendar/CalendarModal.js","components/ui/AddNewFab.js","components/ui/DeleteEventFab.js","components/calendar/CalendarScreen.js","router/PublicRoute.js","router/PrivateRoute.js","router/AppRouter.js","CalendarApp.js","index.js"],"names":["types","initialState","checking","events","activeEvent","modalOpen","rootReducer","combineReducers","ui","state","action","type","calendar","payload","map","e","id","filter","auth","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","baseUrl","process","fetchSinToken","endpoint","data","method","url","fetch","headers","body","JSON","stringify","fetchConToken","token","localStorage","getItem","prepareEvents","end","moment","toDate","start","eventAddNew","event","eventClearActiveEvent","eventUpdated","eventDeleted","eventLoaded","checkingFinish","login","user","startLogout","dispatch","clear","logout","useForm","useState","values","setValues","reset","handleInputChange","target","name","value","LoginScreen","useDispatch","lEmail","lPassword","formLoginValues","handleLoginInputChange","rName","rEmail","rPassword1","rPassword2","formRegisterValues","handleRegisterInputChange","className","onSubmit","email","password","preventDefault","a","resp","json","ok","setItem","Date","getTime","uid","Swal","fire","msg","placeholder","onChange","Navbar","useSelector","onClick","messages","allDay","previous","next","today","month","week","day","agenda","date","time","noEventsInRange","showMore","total","CalendarEvent","title","uiOpenModal","customStyles","content","top","left","right","bottom","marginRight","transform","Modal","setAppElement","now","minutes","seconds","add","nowPlus1","clone","initEvent","notes","CalendarModal","dateStart","setDateStart","dateEnd","setDateEnd","titleValid","setTitleValid","formValues","setFormValues","useEffect","closeModal","isOpen","onRequestClose","style","closeTimeoutMS","overlayClassName","momentStart","momentEnd","isSameOrAfter","trim","length","console","log","getState","evento","_id","eventStartAddNew","minDate","autoComplete","rows","AddNewFab","DeleteEventFab","locale","localizer","momentLocalizer","CalendarScreen","lastView","setLastView","eventos","startAccessor","endAccessor","eventPropGetter","isSelected","backgroundColor","borderRadius","opacity","display","color","onDoubleClickEvent","onSelectEvent","onView","onSelectSlot","selectable","view","components","PublicRoute","isAuthenticated","Component","component","rest","props","to","PrivateRoute","AppRouter","exact","path","CalendarApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a5f977d9.chunk.js","sourcesContent":["// tipos para usar en las acciones de los reducers\r\nexport const types = {\r\n\r\n    uiOpenModal: '[ui] Open modal',\r\n    uiCloseModal: '[ui] Close modal',\r\n\r\n    eventSetActive: '[event] Set Active',\r\n    eventLogout: '[event] Logout event',\r\n\r\n    eventStartAddNew: '[event] Start add new',\r\n    eventAddNew: '[event] Add new',\r\n    eventClearActiveEvent: '[event] Clear active event',\r\n    eventUpdated: '[event] Event updated',\r\n    eventDeleted: '[event] Event deleted',\r\n    eventLoaded: '[event] Events loaded',\r\n\r\n    authCheckingFinish: '[auth] Finish checking login state',\r\n    authStartLogin: '[auth] Start login',\r\n    authLogin: '[auth] Login',\r\n    authStartRegister: '[auth] Start Register',\r\n    authStartTokenRenew: '[auth] Start token renew',\r\n    authLogout: '[auth] Logout',\r\n\r\n}","import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    checking: true,\r\n    // uid: null,\r\n    // name: null\r\n}\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case types.authLogin:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                checking: false\r\n            }\r\n\r\n        case types.authCheckingFinish:\r\n            return {\r\n                ...state,\r\n                checking: false\r\n            }\r\n        // limpio del state al usuario\r\n        case types.authLogout:\r\n            return {\r\n                checking: false\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","\r\nimport { types } from '../types/types';\r\n\r\n// referencia de los parametros necesarios para crear un evento\r\n// {\r\n//     id: 'asasasasasasasas',\r\n//     title: 'Cumpleaños del jefe',\r\n//     start: moment().toDate(),\r\n//     end: moment().add(2, 'hours').toDate(),\r\n//     notes: 'Comprar el pastel',\r\n//     user: {\r\n//         _id: '123',\r\n//         name: 'Daniel'\r\n//     }\r\n\r\n// }\r\n\r\nconst initialState = {\r\n    events: [],\r\n    activeEvent: null\r\n};\r\n\r\nexport const calendarReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case types.eventSetActive:\r\n            return {\r\n                ...state,\r\n                activeEvent: action.payload\r\n            }\r\n\r\n        case types.eventAddNew:\r\n            return {\r\n                ...state,\r\n                events: [\r\n                    ...state.events,\r\n                    action.payload\r\n                ]\r\n            }\r\n\r\n        case types.eventClearActiveEvent:\r\n            return {\r\n                ...state,\r\n                activeEvent: null\r\n            }\r\n        // busca en el state el evento que coincida con el evento a actualizar por id\r\n        case types.eventUpdated:\r\n            return {\r\n                ...state,\r\n                events: state.events.map(\r\n                    e => (e.id === action.payload.id) ? action.payload : e\r\n                )\r\n            }\r\n\r\n        case types.eventDeleted:\r\n            return {\r\n                ...state,\r\n                events: state.events.filter(\r\n                    e => (e.id !== state.activeEvent.id)\r\n                ),\r\n                activeEvent: null\r\n            }\r\n        // agregar al state en redux todos los eventos obtenidos de la bd\r\n        case types.eventLoaded:\r\n            return {\r\n                ...state,\r\n                events: [...action.payload]\r\n            }\r\n        case types.eventLogout:\r\n            return {\r\n                ...initialState\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    modalOpen: false,\r\n}\r\n\r\nexport const uiReducer = ( state = initialState, action ) => {\r\n\r\n    switch ( action.type ) {\r\n        case types.uiOpenModal:\r\n            return {\r\n                ...state,\r\n                modalOpen: true\r\n            }\r\n        case types.uiCloseModal:\r\n            return {\r\n                ...state,\r\n                modalOpen: false\r\n            }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { authReducer } from \"./authReducer\";\r\nimport { calendarReducer } from \"./calendarReducer\";\r\n\r\nimport { uiReducer } from \"./uiReducer\";\r\n\r\n// combina los reducers que seran mostrados en el state de mi store\r\nexport const rootReducer = combineReducers({\r\n    ui: uiReducer,\r\n    calendar: calendarReducer,\r\n    auth: authReducer\r\n})","import { createStore, compose, applyMiddleware } from 'redux';\r\n// thunk para las peticiones async\r\nimport thunk from 'redux-thunk';\r\n\r\nimport { rootReducer } from '../reducers/rootReducer';\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\n// creo el store para almacenar los estados de mis reducers\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(\r\n        applyMiddleware( thunk )\r\n    )\r\n);","const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n// endpoint = baseUrl/auth || baseUrl/auth/new || etc sin enviar token\r\nconst fetchSinToken = (endpoint, data, method = 'GET') => {\r\n\r\n    const url = `${baseUrl}/${endpoint}`;\r\n\r\n    if (method === 'GET') {\r\n        return fetch(url);\r\n    } else {\r\n        return fetch(url, {\r\n            method,\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n}\r\n\r\n// endpoint = baseUrl/auth || baseUrl/auth/new || etc enviando token\r\nconst fetchConToken = (endpoint, data, method = 'GET') => {\r\n\r\n    const url = `${baseUrl}/${endpoint}`;\r\n    const token = localStorage.getItem('token') || '';\r\n\r\n    if (method === 'GET') {\r\n        return fetch(url, {\r\n            method,\r\n            headers: {\r\n                'x-token': token\r\n            }\r\n        });\r\n    } else {\r\n        return fetch(url, {\r\n            method,\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'x-token': token\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    }\r\n}\r\n\r\nexport {\r\n    fetchSinToken,\r\n    fetchConToken\r\n}","import moment from 'moment'\r\n\r\n\r\nexport const prepareEvents = (events = []) => {\r\n\r\n    return events.map(\r\n        (e) => ({\r\n            ...e,\r\n            end: moment(e.end).toDate(),\r\n            start: moment(e.start).toDate(),\r\n        })\r\n    );\r\n}","import Swal from 'sweetalert2';\r\n\r\nimport { fetchConToken } from '../helpers/fetch';\r\nimport { prepareEvents } from '../helpers/prepareEvents';\r\nimport { types } from '../types/types';\r\n\r\n// guardar evento en bd\r\nexport const eventStartAddNew = (event) => {\r\n    return async (dispatch, getState) => {\r\n\r\n        const { uid, name } = getState().auth;\r\n\r\n        try {\r\n            const resp = await fetchConToken('events', event, 'POST');\r\n            const body = await resp.json();\r\n            // si se guardo en la bd,  asigno al evento el id generado en la bd y el user para agregarlos al state \r\n            if (body.ok) {\r\n                event.id = body.evento.id;\r\n                event.user = {\r\n                    _id: uid,\r\n                    name: name\r\n                }\r\n\r\n                // asgino al state de redux el evento\r\n                dispatch(eventAddNew(event));\r\n\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// asigna un tipo y payload para usar en mis reducers\r\nconst eventAddNew = (event) => ({\r\n    type: types.eventAddNew,\r\n    payload: event\r\n});\r\n\r\nexport const eventSetActive = (event) => ({\r\n    type: types.eventSetActive,\r\n    payload: event\r\n});\r\n\r\nexport const eventClearActiveEvent = () => ({ type: types.eventClearActiveEvent })\r\n\r\n// actualizar evento en la bd\r\nexport const eventStartUpdate = (event) => {\r\n    return async (dispatch) => {\r\n\r\n        try {\r\n            const resp = await fetchConToken(`events/${event.id}`, event, 'PUT');\r\n            const body = await resp.json();\r\n\r\n            if (body.ok) {\r\n                // si todo sale bien actualizo en evento en el state de redux\r\n                dispatch(eventUpdated(event));\r\n            } else {\r\n                Swal.fire('Error', body.msg, 'error');\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\n// actualiza el evento en el state de redux\r\nconst eventUpdated = (event) => ({\r\n    type: types.eventUpdated,\r\n    payload: event\r\n});\r\n\r\n// eliminar un evento en la bd\r\nexport const eventStartDelete = () => {\r\n    return async (dispatch, getState) => {\r\n\r\n        //obtengo el id del evento activo a eliminar\r\n        const { id } = getState().calendar.activeEvent;\r\n\r\n        try {\r\n            const resp = await fetchConToken(`events/${id}`, {}, 'DELETE');\r\n            const body = await resp.json();\r\n\r\n            if (body.ok) {\r\n                // si todo sale bien elimino el evento en el state de redux\r\n                dispatch(eventDeleted());\r\n            } else {\r\n                Swal.fire('Error', body.msg, 'error');\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\n// eliminar un evento del state en redux\r\nconst eventDeleted = () => ({ type: types.eventDeleted });\r\n\r\n// obtener eventos de la bd\r\nexport const eventStartLoading = () => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const resp = await fetchConToken('events');\r\n            const body = await resp.json();\r\n\r\n            const events = prepareEvents(body.eventos);\r\n\r\n            dispatch(eventLoaded(events));\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n// agregar al state de redux los eventos obtinos de la bd\r\nconst eventLoaded = (events) => ({\r\n    type: types.eventLoaded,\r\n    payload: events\r\n});\r\n\r\nexport const eventLogout = () => ({ type: types.eventLogout })","import Swal from \"sweetalert2\";\r\nimport { fetchConToken, fetchSinToken } from \"../helpers/fetch\"\r\nimport { types } from \"../types/types\";\r\nimport { eventLogout } from \"./events\";\r\n\r\n\r\nexport const startLogin = (email, password) => {\r\n    return async (dispatch) => {\r\n\r\n        const resp = await fetchSinToken('auth', { email, password }, 'POST');\r\n        const body = await resp.json();\r\n\r\n        if (body.ok) {\r\n            localStorage.setItem('token', body.token);\r\n            localStorage.setItem('token-init-date', new Date().getTime());\r\n            // agrega al state en mi storage de mi reducer el uid y name\r\n            dispatch(login({\r\n                uid: body.uid,\r\n                name: body.name\r\n            }))\r\n        } else {\r\n            Swal.fire('Error', body.msg, 'error');\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const startRegister = (email, password, name) => {\r\n    return async (dispatch) => {\r\n\r\n        const resp = await fetchSinToken('auth/new', { email, password, name }, 'POST');\r\n        const body = await resp.json();\r\n\r\n        if (body.ok) {\r\n            localStorage.setItem('token', body.token);\r\n            localStorage.setItem('token-init-date', new Date().getTime());\r\n            // agrega al state en mi storage de mi reducer el uid y name\r\n            dispatch(login({\r\n                uid: body.uid,\r\n                name: body.name\r\n            }))\r\n        } else {\r\n            Swal.fire('Error', body.msg, 'error');\r\n        }\r\n\r\n    }\r\n}\r\n// renovar token\r\nexport const startChecking = () => {\r\n    return async (dispatch) => {\r\n\r\n        const resp = await fetchConToken('auth/renew');\r\n        const body = await resp.json();\r\n\r\n        if (body.ok) {\r\n            localStorage.setItem('token', body.token);\r\n            localStorage.setItem('token-init-date', new Date().getTime());\r\n            // agrega al state en mi storage de mi reducer el uid y name\r\n            dispatch(login({\r\n                uid: body.uid,\r\n                name: body.name\r\n            }))\r\n        } else {\r\n\r\n            dispatch(checkingFinish());\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst checkingFinish = () => ({ type: types.authCheckingFinish });\r\n\r\nconst login = (user) => ({\r\n    type: types.authLogin,\r\n    payload: user\r\n});\r\n\r\nexport const startLogout = () => {\r\n    // retorno una tarea asincrona\r\n    return (dispatch) => {\r\n\r\n        // limpio todo del localStorage\r\n        localStorage.clear();\r\n        // eliminar del state en redux los eventos\r\n        dispatch(eventLogout());\r\n        // despacho y limpio el state de mi redux\r\n        dispatch(logout());\r\n    }\r\n}\r\n\r\nconst logout = () => ({ type: types.authLogout })","import { useState } from 'react';\r\n\r\n\r\nexport const useForm = (initialState = {}) => {\r\n\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => {\r\n        setValues(initialState);\r\n    }\r\n\r\n\r\n    const handleInputChange = ({ target }) => {\r\n\r\n        setValues({\r\n            ...values,\r\n            [target.name]: target.value\r\n        });\r\n\r\n    }\r\n\r\n    return [values, handleInputChange, reset];\r\n\r\n}","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { startLogin, startRegister } from '../../actions/auth';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Swal from 'sweetalert2';\r\n\r\nimport './login.css';\r\n\r\nexport const LoginScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // custom hook para manejar formulario\r\n    const [formLoginValues, handleLoginInputChange] = useForm({\r\n        // inicializo los inputos con estos valores\r\n        lEmail: 'dangel@gmail.com',\r\n        lPassword: '123456'\r\n    });\r\n\r\n    // custom hook para manejar formulario de registro\r\n    const [formRegisterValues, handleRegisterInputChange] = useForm({\r\n        // inicializo los inputos con estos valores\r\n        rName: 'Daniel',\r\n        rEmail: 'dangel@gmail.com',\r\n        rPassword1: '123456',\r\n        rPassword2: '123456'\r\n    });\r\n\r\n    const { rName, rEmail, rPassword1, rPassword2 } = formRegisterValues;\r\n\r\n    const { lEmail, lPassword } = formLoginValues;\r\n\r\n    const handleLogin = (e) => {\r\n        e.preventDefault();\r\n\r\n        dispatch(startLogin(lEmail, lPassword));\r\n\r\n    }\r\n\r\n    const handleRegister = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (rPassword1 !== rPassword2) {\r\n            return Swal.fire('Error', 'Las contraseñas deben de ser iguales', 'error');\r\n        }\r\n\r\n        dispatch(startRegister(rEmail, rPassword1, rName));\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"container login-container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 login-form-1\">\r\n                    <h3>Ingreso</h3>\r\n                    <form onSubmit={handleLogin}>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Correo\"\r\n                                name=\"lEmail\"\r\n                                value={lEmail}\r\n                                onChange={handleLoginInputChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Contraseña\"\r\n                                name=\"lPassword\"\r\n                                value={lPassword}\r\n                                onChange={handleLoginInputChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"submit\"\r\n                                className=\"btnSubmit\"\r\n                                value=\"Login\"\r\n                            />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n                <div className=\"col-md-6 login-form-2\">\r\n                    <h3>Registro</h3>\r\n                    <form onSubmit={handleRegister}>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Nombre\"\r\n                                name=\"rName\"\r\n                                value={rName}\r\n                                onChange={handleRegisterInputChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"email\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Correo\"\r\n                                name=\"rEmail\"\r\n                                value={rEmail}\r\n                                onChange={handleRegisterInputChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Contraseña\"\r\n                                name=\"rPassword1\"\r\n                                value={rPassword1}\r\n                                onChange={handleRegisterInputChange}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Repita la contraseña\"\r\n                                name=\"rPassword2\"\r\n                                value={rPassword2}\r\n                                onChange={handleRegisterInputChange}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"submit\"\r\n                                className=\"btnSubmit\"\r\n                                value=\"Crear cuenta\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { startLogout } from '../../actions/auth';\r\n\r\nexport const Navbar = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    // obtener de mi state el nombre\r\n    const { name } = useSelector(state => state.auth);\r\n\r\n    // despacho la accion startLogout a mi state para eliminar el uid y name del usuario\r\n    const handleLogout = () => {\r\n        // eliminar del state en redux el user\r\n        dispatch(startLogout());\r\n    }\r\n\r\n    return (\r\n        <div className=\"navbar navbar-dark bg-dark mb-4\">\r\n            <span className=\"navbar-brand\">\r\n                {name}\r\n            </span>\r\n\r\n            <button\r\n                className=\"btn btn-outline-danger\"\r\n                onClick={handleLogout}\r\n            >\r\n                <i className=\"fas fa-sign-out-alt\"></i>\r\n                <span> Salir</span>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","export const messages = {\r\n    allDay: 'Todo el día',\r\n    previous: '<',\r\n    next: '>',\r\n    today: 'Hoy',\r\n    month: 'Mes',\r\n    week: 'Semana',\r\n    day: 'Día',\r\n    agenda: 'Agenda',\r\n    date: 'Fecha',\r\n    time: 'Hora',\r\n    event: 'Evento',\r\n    noEventsInRange: 'No hay eventos en este rango',\r\n    showMore: total => `+ Ver más (${total})`\r\n};","import React from 'react'\r\n\r\nexport const CalendarEvent = ({ event }) => {\r\n    // propiedades de events definidos en mi CalendarScreen component\r\n    const { title, user } = event;\r\n    return (\r\n        <div>\r\n            <strong>{ title }</strong>\r\n            <span>- { user.name }</span>\r\n        </div>\r\n    )\r\n}\r\n","import { types } from \"../types/types\";\r\n\r\n// return accion para abrir el modal\r\nexport const uiOpenModal = () => ({ type: types.uiOpenModal });\r\n// return accion para cerrar el modal\r\nexport const uiCloseModal = () => ({ type: types.uiCloseModal }); ","import React, { useEffect, useState } from 'react';\r\n// seleccionar atributos del store\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport moment from 'moment';\r\nimport Modal from 'react-modal';\r\nimport DateTimePicker from 'react-datetime-picker';\r\nimport Swal from 'sweetalert2';\r\nimport { uiCloseModal } from '../../actions/ui';\r\nimport { eventClearActiveEvent, eventStartAddNew, eventStartUpdate } from '../../actions/events';\r\n\r\n// posiciona el modal en el medio\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }\r\n};\r\nModal.setAppElement('#root');\r\n\r\n// momento actual + 1 hora\r\nconst now = moment().minutes(0).seconds(0).add(1, 'hours');\r\nconst nowPlus1 = now.clone().add(1, 'hours');\r\n\r\nconst initEvent = {\r\n    title: '',\r\n    notes: '',\r\n    start: now.toDate(),\r\n    end: nowPlus1.toDate()\r\n}\r\n\r\nexport const CalendarModal = () => {\r\n\r\n    const { modalOpen } = useSelector(state => state.ui);\r\n    const { activeEvent } = useSelector(state => state.calendar);\r\n    const dispatch = useDispatch();\r\n    // selecciono del store el atributo ui.modalOpen para asignarlo al componente modal y inciar con ese valor\r\n\r\n    // asigna la fecha/hora en fecha inicio\r\n    const [dateStart, setDateStart] = useState(now.toDate());\r\n    // asigna la fecha/hora en fecha fin\r\n    const [dateEnd, setDateEnd] = useState(nowPlus1.toDate());\r\n    // cambia el state para validar que el titulo es valido\r\n    const [titleValid, setTitleValid] = useState(true);\r\n\r\n    const [formValues, setFormValues] = useState(initEvent);\r\n    // extraigo los atributos para asignarlos a los inputs del form o validarlos\r\n    const { notes, title, start, end } = formValues;\r\n\r\n    useEffect(() => {\r\n        // si no es null el evento activo asigno los valores al form del evento seleccionado\r\n        if (activeEvent) {\r\n            setFormValues(activeEvent);\r\n        } else {\r\n            setFormValues(initEvent);\r\n        }\r\n    }, [activeEvent, setFormValues])\r\n\r\n    // asigna el nuevo valor al input que coincida con el target.name\r\n    const handleInputChange = ({ target }) => {\r\n        setFormValues({\r\n            ...formValues,\r\n            [target.name]: target.value\r\n        });\r\n    }\r\n    const closeModal = () => {\r\n        // TODO: cerrar el modal\r\n        // asigna false al state en uiReducer para cerrar el modal\r\n        dispatch(uiCloseModal());\r\n        // asigna null al activeEvent en el store\r\n        dispatch(eventClearActiveEvent());\r\n        setFormValues(initEvent);\r\n    }\r\n    // asigna la nueva fecha seleccionada    \r\n    const handleStartDateChange = (e) => {\r\n        setDateStart(e);\r\n        // para asignar al state del form el nuevo valor al atributo start\r\n        setFormValues({\r\n            ...formValues,\r\n            start: e\r\n        })\r\n    }\r\n    // asigna la nueva fecha seleccionada\r\n    const handleEndDateChange = (e) => {\r\n        setDateEnd(e);\r\n        setFormValues({\r\n            ...formValues,\r\n            end: e\r\n        });\r\n    }\r\n\r\n    const handleSubmitForm = (e) => {\r\n        e.preventDefault();\r\n\r\n        const momentStart = moment(start);\r\n        const momentEnd = moment(end);\r\n\r\n        if (momentStart.isSameOrAfter(momentEnd)) {\r\n            return Swal.fire('Error', 'La fecha fin debe de ser mayor a la fecha de inicio', 'error');\r\n        }\r\n\r\n        if (title.trim().length < 2) {\r\n            return setTitleValid(false);\r\n        }\r\n        // si esta activo el activeEvent significa que quiere editar el evento\r\n        if (activeEvent) {\r\n            dispatch(eventStartUpdate(formValues))\r\n        } else {\r\n\r\n            // envio los datos del form para guardarlos en la bd\r\n            dispatch(eventStartAddNew(formValues));\r\n        }\r\n\r\n        setTitleValid(true);\r\n        closeModal();\r\n\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalOpen}\r\n            onRequestClose={closeModal}\r\n            style={customStyles}\r\n            closeTimeoutMS={200}\r\n            className=\"modal\"\r\n            overlayClassName=\"modal-fondo\"\r\n        >\r\n            <h1> {(activeEvent) ? 'Editar evento' : 'Nuevo evento'} </h1>\r\n            <hr />\r\n            <form\r\n                className=\"container\"\r\n                onSubmit={handleSubmitForm}\r\n            >\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Fecha y hora inicio</label>\r\n                    <DateTimePicker\r\n                        onChange={handleStartDateChange}\r\n                        value={dateStart}\r\n                        className=\"form-control\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Fecha y hora fin</label>\r\n                    <DateTimePicker\r\n                        onChange={handleEndDateChange}\r\n                        value={dateEnd}\r\n                        minDate={dateStart}\r\n                        className=\"form-control\"\r\n                    />\r\n                </div>\r\n\r\n                <hr />\r\n                <div className=\"form-group\">\r\n                    <label>Titulo y notas</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        // si el titulo no es valido(false) marca error\r\n                        className={`form-control ${!titleValid && 'is-invalid'} `}\r\n                        placeholder=\"Título del evento\"\r\n                        name=\"title\"\r\n                        autoComplete=\"off\"\r\n                        value={title}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">Una descripción corta</small>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <textarea\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Notas\"\r\n                        rows=\"5\"\r\n                        name=\"notes\"\r\n                        value={notes}\r\n                        onChange={handleInputChange}\r\n                    ></textarea>\r\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">Información adicional</small>\r\n                </div>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-outline-primary btn-block\"\r\n                >\r\n                    <i className=\"far fa-save\"></i>\r\n                    <span> Guardar</span>\r\n                </button>\r\n\r\n            </form>\r\n        </Modal>\r\n    )\r\n}\r\n","import React from 'react';\r\n// despacho atributos al store para modificar\r\nimport { useDispatch } from 'react-redux';\r\nimport { eventClearActiveEvent } from '../../actions/events';\r\nimport { uiOpenModal } from '../../actions/ui';\r\n\r\nexport const AddNewFab = () => {\r\n\r\n    // poder acceder al state del store y modificarlo\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClickNew = () => {\r\n        // busca mis acción uiOpenModal y asigna true a modalOpen en el state de mi uiReducer\r\n        dispatch(uiOpenModal());\r\n        // limpia el evento activo para que el formulario no muestre los datos de un evento seleccionado\r\n        dispatch(eventClearActiveEvent());\r\n    }\r\n    return (\r\n        <button\r\n            className=\"btn btn-primary fab\"\r\n            onClick={handleClickNew}\r\n        >\r\n            <i className=\"fas fa-plus\"></i>\r\n        </button>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { eventStartDelete } from '../../actions/events';\r\n\r\nexport const DeleteEventFab = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    // borrar el evento seleccionado del store\r\n    const handleDelete = () => {\r\n\r\n        dispatch(eventStartDelete());\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className=\"btn btn-danger fab-danger\"\r\n            onClick={handleDelete}\r\n        >\r\n            <i className=\"fas fa-trash\"></i>\r\n            <span> Borrar evento</span>\r\n        </button>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\r\n// useDispatch para despachar acciones en los reducers\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport moment from 'moment';\r\n\r\nimport { Navbar } from '../ui/Navbar';\r\nimport { messages } from '../../helpers/calendar-messages-es';\r\nimport { CalendarEvent } from './CalendarEvent';\r\nimport { CalendarModal } from './CalendarModal';\r\n\r\nimport { uiOpenModal } from '../../actions/ui';\r\n\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport 'moment/locale/es'\r\nimport { AddNewFab } from '../ui/AddNewFab';\r\nimport { eventClearActiveEvent, eventSetActive, eventStartLoading } from '../../actions/events';\r\nimport { DeleteEventFab } from '../ui/DeleteEventFab';\r\n\r\nmoment.locale('es');\r\n\r\nconst localizer = momentLocalizer(moment);\r\n\r\nexport const CalendarScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    // asigno todos los eventos del store\r\n    const { events, activeEvent } = useSelector(state => state.calendar);\r\n    const { uid } = useSelector(state => state.auth);\r\n\r\n    // obtener del localStorge la ultima vista si existe, en caso contrario envia a la vista mes\r\n    const [lastView, setLastView] = useState(localStorage.getItem('lastView') || 'month');\r\n    // obtener los eventos siempre que renderise el componente y cuando se dispare el dispatch\r\n    useEffect(() => {\r\n\r\n        dispatch(eventStartLoading());\r\n\r\n    }, [dispatch])\r\n\r\n    // abrir modal al hacer doble click sobre un evento\r\n    const onDoubleClick = (e) => {\r\n        // console.log(e);\r\n        //asigna true al atributo modalOpen\r\n        dispatch(uiOpenModal());\r\n    }\r\n    // envia al calendarReducer el evento seleccionado como activo\r\n    const onSelectEvent = (e) => {\r\n\r\n        dispatch(eventSetActive(e));\r\n\r\n    }\r\n    // cuando cambie entre vista guarda en el estado y localStorage el evento\r\n    const onViewChange = (e) => {\r\n        setLastView(e);\r\n        localStorage.setItem('lastView', e);\r\n    }\r\n    // limpio el evento activo al seleccionar fuera del evento\r\n    const onSelectSlot = (e) => {\r\n        // console.log(e);\r\n        dispatch(eventClearActiveEvent());\r\n    }\r\n\r\n    // asigna estilos a los eventos creados en el calendario\r\n    const eventStyleGetter = (event, start, end, isSelected) => {\r\n\r\n        const style = {\r\n            // verificar si el usuario es el creador del evento le aplica un color distinto\r\n            backgroundColor: (uid === event.user._id) ? '#367CF7' : '#465660',\r\n            borderRadius: '0px',\r\n            opacity: 0.8,\r\n            display: 'block',\r\n            color: 'white'\r\n        }\r\n\r\n        return {\r\n            style\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"calendar-screen\">\r\n            <Navbar />\r\n\r\n            <Calendar\r\n                localizer={localizer}\r\n                events={events}\r\n                startAccessor=\"start\"\r\n                endAccessor=\"end\"\r\n                messages={messages}\r\n                eventPropGetter={eventStyleGetter}\r\n                onDoubleClickEvent={onDoubleClick}\r\n                onSelectEvent={onSelectEvent}\r\n                onView={onViewChange}\r\n                onSelectSlot={onSelectSlot}\r\n                selectable={true}\r\n                // posiciono en la vista almacenada\r\n                view={lastView}\r\n                components={{\r\n                    event: CalendarEvent\r\n                }}\r\n            />\r\n            <AddNewFab />\r\n            {\r\n                (activeEvent) && <DeleteEventFab />\r\n\r\n            }\r\n            <CalendarModal />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nexport const PublicRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n\r\n    return (\r\n        <Route {...rest}\r\n            component={(props) => (\r\n                (isAuthenticated)\r\n                    ? (<Redirect to=\"/\" />)\r\n                    : (<Component {...props} />)\r\n            )}\r\n\r\n        />\r\n    )\r\n}\r\n\r\nPublicRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\nexport const PrivateRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n\r\n    return (\r\n        <Route {...rest}\r\n            component={(props) => (\r\n                (isAuthenticated)\r\n                    ? (<Component {...props} />)\r\n                    : (<Redirect to=\"/login\" />)\r\n            )}\r\n\r\n        />\r\n    )\r\n}\r\n\r\nPrivateRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}","import React, { useEffect } from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Redirect\r\n} from 'react-router-dom';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { LoginScreen } from '../components/auth/LoginScreen';\r\nimport { CalendarScreen } from '../components/calendar/CalendarScreen';\r\nimport { startChecking } from '../actions/auth';\r\nimport { PublicRoute } from './PublicRoute';\r\nimport { PrivateRoute } from './PrivateRoute';\r\n\r\nexport const AppRouter = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    // selecciono de mi store el checking\r\n    const { checking, uid } = useSelector(state => state.auth);\r\n\r\n    // renovar token, buscandolo del localStora siempre que navegue y no tenga expirado el token\r\n    useEffect(() => {\r\n\r\n        dispatch(startChecking());\r\n\r\n    }, [dispatch])\r\n\r\n    if (checking) {\r\n        return (<h5>Espere...</h5>);\r\n    }\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <Switch>\r\n                    <PublicRoute\r\n                        exact\r\n                        path=\"/login\"\r\n                        component={LoginScreen}\r\n                        // si el uid tiene algo es true\r\n                        isAuthenticated={!!uid}\r\n                    />\r\n\r\n                    <PrivateRoute\r\n                        exact\r\n                        path=\"/\"\r\n                        component={CalendarScreen}\r\n                        isAuthenticated={!!uid}\r\n                    />\r\n\r\n                    <Redirect to=\"/\" />\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\n\r\n// store almacena todos mis estados\r\nimport { store } from './store/store';\r\nimport { AppRouter } from './router/AppRouter';\r\n\r\nexport const CalendarApp = () => {\r\n    return (\r\n        // Provider provee a los componentes hijos la info del store\r\n        <Provider store={ store }>\r\n            <AppRouter />            \r\n        </Provider>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { CalendarApp } from './CalendarApp';\r\n\r\nimport './styles.css';\r\n\r\nReactDOM.render(\r\n  <CalendarApp />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}